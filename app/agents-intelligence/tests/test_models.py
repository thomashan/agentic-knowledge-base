import pytest
from agents_intelligence.models import IntelligenceReport, KeyFinding
from agents_research.models import ResearchOutput, ResearchResult
from pydantic import ValidationError


def test_key_finding_model():
    """Tests the KeyFinding model for successful creation and validation."""
    finding = KeyFinding(finding_id=1, title="Test Finding", summary="This is a test summary.", citations=["http://example.com"])
    assert finding.finding_id == 1
    assert finding.title == "Test Finding"
    assert finding.summary == "This is a test summary."
    assert finding.citations == ["http://example.com"]


def test_intelligence_report_model():
    """Tests the IntelligenceReport model for successful creation and validation."""
    report = IntelligenceReport(
        topic="Test Topic",
        executive_summary="This is an executive summary.",
        key_findings=[KeyFinding(finding_id=1, title="Test Finding", summary="This is a test summary.", citations=["http://example.com"])],
    )
    assert report.topic == "Test Topic"
    assert report.executive_summary == "This is an executive summary."
    assert len(report.key_findings) == 1
    assert report.key_findings[0].title == "Test Finding"


def test_key_finding_missing_fields():
    """Tests that KeyFinding raises a validation error for missing required fields."""
    with pytest.raises(ValidationError):
        KeyFinding(finding_id=1, title="Test")


def test_intelligence_report_missing_fields():
    """Tests that IntelligenceReport raises a validation error for missing required fields."""
    with pytest.raises(ValidationError):
        IntelligenceReport(topic="Test")


def test_intelligence_report_with_research_output():
    """Tests creating an IntelligenceReport that might be derived from a ResearchOutput."""
    # This test is more conceptual, as the report is generated by an agent,
    # but we can ensure the structure is compatible.
    research_output = ResearchOutput(topic="Test Topic", summary="This is a test summary.", results=[ResearchResult(url="http://example.com", content="This is test content.")])
    report = IntelligenceReport(
        topic=research_output.topic,
        executive_summary="Summary of content.",
        key_findings=[KeyFinding(finding_id=1, title="Finding from content", summary="Summary of the finding.", citations=["http://example.com"])],
    )
    assert report.topic == research_output.topic
